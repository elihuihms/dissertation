#!/usr/bin/env python

import argparse
import sys
import glob
import os.path
from scipy import recfromtxt, interpolate, optimize

def interpolate_curve( x, int_x, int_y ):
	"""
	Interpolate one curve to another by spline fitting
		
	Returns a list of the interpolated y values
		
	Arguments:
	x		- list of x values over which to interpolate the curve
	int_x	- list of original x values
	int_y	- list of original y values
	"""

	spline = interpolate.splrep( int_x, int_y );
	return interpolate.splev( x, spline )

def get_scale( y, dy, y_fit):
	"""
	Get the optimal scaling factor between two single-dimension vectors

	Arguments:
	y		- list of floats, the experimental dataset
	dy		- list of floats, the experimental uncertainty (sigma) for each datapoint
	y_fit	- list of floats, the fitted values
	"""
	
	(a,b) = (0.0,0.0)
	for i in range( len(y) ):
		if(dy[i] == 0.0):
			continue
		a += ( y_fit[i] * y[i] )/( dy[i]**2 )
		b += ( y_fit[i] * y_fit[i] )/( dy[i]**2 )
	
	# should raise error, but eh
	if( b == 0 ):
		return 0.0
		
	return a / b

def get_offset( y, y_fit, fraction=1.0):
	"""
	Get the necessary offset transformation between two single-dimension vectors
	
	Returns the offset value
	
	Arguments:
	y			- list of floats, the experimental dataset
	y_fit		- list of floats, the fitted values
	fraction	- float, the fraction of datapoints to use to determine the offset, defaults to 1 (all points).
	"""
	
	n = len(y)
	if (fraction >= 0):
		list = range( 0, int(n * fraction) )
	else:
		list = range( int(n * fraction * -1.0), n )

	y_avg, y_fit_avg = 0.0, 0.0
	for i in list:
		y_avg += y[ i ]
		y_fit_avg += y_fit[ i ]
		
	return (y_avg - y_fit_avg) / len(list)
	
def get_curve_transforms( y, dy, y_fit ):
	"""
	Get the scaling and offset transformations between two single-dimension vectors
	
	Returns (scale,offset)
	
	Arguments:
	y			- list of n floats, the experimental dataset
	dy			- list of n floats, the experimental uncertainty (sigma) for each datapoint
	y_fit		- list of n floats, the fitted values
	"""
	
	# translate both y and y_fit means to zero
	n = len(y)
	y_avg = sum(y) / n
	y_fit_avg = sum(y_fit) / n

	for i in range(n):
		y[i] -= y_avg
		y_fit[i] -= y_fit_avg
			
	scale = get_scale( y, dy, y_fit )
	
	return( scale, y_avg - (y_fit_avg * scale) )

def get_chisq_reduced( y, dy, y_fit ):
	"""
	Get the reduced chi-squared value between y and y_fit within the error band dy
	
	Arguments:
	y		- list of floats, the experimental dataset
	dy		- list of floats, the experimental uncertainty (sigma) for each datapoint
	y_fit	- list of floats, the fitted values
	"""
		
	n = len(y)
	
	sum = 0.0
	for i in range( n ):
		if(dy[i] == 0.0):
			continue
		sum += ( (y[i] - y_fit[i]) / dy[i] )**2
		
	return sum/(n -1)
if( __name__ == '__main__'):
	
	parser = argparse.ArgumentParser()
	parser.add_argument('-exp',		action='store',		required=True, metavar='<FILE>',	help='File containing experimental data formatted as X, Y, dY')
	parser.add_argument('-fit',		action='store',		required=True, metavar='<FILE>',	help='File containing potential fit to experimental data, formatted as X, Y')
	parser.add_argument('-offset',	action='store_true',	default=False,					help='Applies a consistent offset to improve fit.')
	parser.add_argument('-scale',	action='store_true',	default=False,					help='Applies a consistent scaling factor to improve fit')
	parser.add_argument('-out',		action='store',		default=None,	metavar='<FILE>',	help='File to save the resulting offset and/or scaled fit file')
	parser.add_argument('-q',		action='store_true',default=False,						help='Quiet option - print just the fit file name and the chisq value')
	
	args = parser.parse_args()
	
	(exp_x,exp_y,exp_d) = recfromtxt( args.exp, unpack=True )
	(tmp_x,tmp_y) = recfromtxt( args.fit, unpack=True )
	
	# interpolate the fit to the experimental data
	fit_y = interpolate_curve( exp_x, tmp_x, tmp_y )
	
	# determine the scaling and/or offset coefficients
	offset = 0.0
	scale = 1.0
	if(args.scale and args.offset):
		if( not args.q ):
			print "Determining optimum offset and scaling factor via simplex algorithm."
		
		def fitness(p0,y,d,f):
			tmp = [0.0]*len(f)
			for i in range( len(tmp) ):
				tmp[i] = (f[i] * p0[1]) + p0[0]

			return get_chisq_reduced( y, d, tmp )
		
		(offset,scale) = optimize.fmin(fitness, x0=(offset,scale), args=(exp_y,exp_d,fit_y), xtol=0.001, disp=False)
		
		if( not args.q ):
			print "Applied offset: %.3f" % offset
			print "Applied scaling factor: %.3f" % scale
	
	elif(args.offset):
		offset = get_offset( exp_y, fit_y )
		
		if( not args.q ):
			print "Applied offset: %.3f" % offset
	elif(args.scale):
		scale = get_scale( exp_y, exp_d, fit_y )
		
		if( not args.q ):
			print "Applied scaling factor: %.3f" % scale
	
	# apply the scaling and offset coefficients to the dataset
	for i in range( len(exp_x) ):
		fit_y[i] = (fit_y[i] * scale) + offset
	
	chisq = get_chisq_reduced( exp_y, exp_d, fit_y )
	if( not args.q ):
		print "Chi-squared goodness of fit: %.3f" % chisq
	else:
		print "%s\t%.3E\t%.3E\t%.3E" % (args.fit,chisq,scale,offset)
#		print "%s\t%.3f" % (args.fit,chisq)
		
	if(args.out != None):
		if( not args.q ):
			print "Saving fit file \"%s\"" % args.out
			
		handle = open(args.out, 'w')
		#handle.write("#X\tY_exp\tY_fit\tres\n")
		handle.write("#X\tY_fit\tres\n")
		for i in range( len(exp_x) ):
			#handle.write( "%.3f\t%.3f\t%.3f\t%.3f\n"  % (exp_x[i],exp_y[i],fit_y[i],(exp_y[i]-fit_y[i])) )
			handle.write( "%.3f\t%.3f\t%.3f\n"  % (exp_x[i],fit_y[i],(exp_y[i]-fit_y[i])) )	
		handle.close()
		
